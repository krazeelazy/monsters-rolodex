{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAMN,EAAMI,QAAQG,MAApB,WCFKC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCkHHG,E,kDAnHX,aAAe,IAAD,8BACV,gBAoBJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnBtC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,qDAWd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAWjD,WACI,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OACxCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAExD,OAyEI,cAxEA,CAwEA,OAAKhC,UAAU,MAAf,UACA,qDACI,cAAC,EAAD,CACIW,YAAY,iBACZC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9GlBK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.71af1120.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> { props.monster.name } </h2>\n        <p> { props.monster.email } </p>\n    </div>\n)","import React from \"react\";\n\nimport { Card } from '../card/card.component'\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/>\n        ))}\n    </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        type='search' \n        placeholder= {placeholder} // make placeholder dynamic \n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n\n        // this.handleChange = this.handleChange.bind(this); // explicitly sets the context of 'this' in handleChange to 'this' in the constructor (the App component)\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json()) // convert response into json format\n            .then(users => this.setState({ monsters: users }));// store the data in the state's monsters attribute\n    }\n\n    // handleChange(e) {// requires explicit binding of 'this'\n    //     this.setState({ searchField: e.target.value})\n    // }\n    \n    handleChange = (e) => {\n        this.setState({ searchField: e.target.value})\n    }\n\n    render() {\n        const { monsters, searchField } = this.state;\n        const filteredMonsters = monsters.filter(monster =>\n                monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n            )\n        return (\n            // lesson 26\n            // <div className=\"App\">\n            // <header className=\"App-header\">\n            //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            //     <p>{this.state.string}</p>\n            //     <button onClick={() => this.setState({ string: 'Hello Andrei' })}>Change Text</button>\n            // </header>\n            // </div>\n            \n            // lesson 30: fetching\n            // <div className=\"App\">\n            //     {\n            //         this.state.monsters.map(monster => (\n            //             <h1 key={monster.id}> { monster.name } </h1>\n            //         ))}\n            // </div>\n\n            // lesson 33 1st part\n            // <div className=\"App\">\n            // <CardList name=\"M\">\n            //     <h1>M</h1>\n            // </CardList>\n            //     {\n            //         this.state.monsters.map(monster => (\n            //             <h1 key={monster.id}> { monster.name } </h1>\n            //         ))}\n            // </div>\n\n            //end of lesson 33\n            // <div className=\"App\">\n            //     <CardList>\n            //         {this.state.monsters.map(monster => (\n            //             <h1 key={monster.id}> { monster.name } </h1>\n            //         ))}\n                    \n            //     </CardList>\n            // </div>\n\n            // // after lesson 37\n            // <div className=\"App\">\n            //     <CardList monsters={this.state.monsters} />\n            // </div>\n\n            // // end of lesson 38\n            // <div className='App'>\n            //     <input \n            //         type='search' \n            //         placeholder='search monsters' \n            //         onChange={e => this.setState({ searchField: e.target.value})}\n            //     />\n            //     <CardList monsters={this.state.monsters} />\n            // </div>\n\n            // // after lesson 43\n            // <div className='App'>\n            //     <SearchBox\n            //         placeholder='search monster'\n            //         handleChange={e => this.setState({ searchField: e.target.value})}\n            //     />\n            //     <CardList monsters={filteredMonsters} />\n            // </div>\n\n            // //after lesson 44\n            // <div className='App'>\n            //     <SearchBox\n            //         placeholder='search monster'\n            //         handleChange={this.handleChange}\n            //     />\n            //     <CardList monsters={filteredMonsters} />\n            // </div>\n\n\n            <div className='App'>\n            <h1> Monster's Rolodex </h1>\n                <SearchBox\n                    placeholder='search monster'\n                    handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonsters} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}